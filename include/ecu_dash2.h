/**
 * @file ecu_dash2.h
 *
 * @brief This header file was generated by cantools version 40.2.2 Sat Jun 14 01:20:09 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef ECU_DASH2_H
#define ECU_DASH2_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define ECU_DASH2_MOTOR_STATUS_FRAME_ID (0x100u)
#define ECU_DASH2_FAULT_STATUS_FRAME_ID (0x200u)
#define ECU_DASH2_CAR_STATUS_FRAME_ID (0x258u)
#define ECU_DASH2_BMS_INFO_FRAME_ID (0x2bcu)
#define ECU_DASH2_COOLING_FRAME_ID (0x320u)

/* Frame lengths in bytes. */
#define ECU_DASH2_MOTOR_STATUS_LENGTH (8u)
#define ECU_DASH2_FAULT_STATUS_LENGTH (1u)
#define ECU_DASH2_CAR_STATUS_LENGTH (1u)
#define ECU_DASH2_BMS_INFO_LENGTH (4u)
#define ECU_DASH2_COOLING_LENGTH (1u)

/* Extended or standard frame types. */
#define ECU_DASH2_MOTOR_STATUS_IS_EXTENDED (0)
#define ECU_DASH2_FAULT_STATUS_IS_EXTENDED (0)
#define ECU_DASH2_CAR_STATUS_IS_EXTENDED (0)
#define ECU_DASH2_BMS_INFO_IS_EXTENDED (0)
#define ECU_DASH2_COOLING_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define ECU_DASH2_MOTOR_STATUS_NAME "Motor_Status"
#define ECU_DASH2_FAULT_STATUS_NAME "Fault_Status"
#define ECU_DASH2_CAR_STATUS_NAME "Car_Status"
#define ECU_DASH2_BMS_INFO_NAME "BMS_Info"
#define ECU_DASH2_COOLING_NAME "Cooling"

/* Signal Names. */
#define ECU_DASH2_MOTOR_STATUS_INV_FAST_DC_BUS_VOLTAGE_NAME "INV_Fast_DC_Bus_Voltage"
#define ECU_DASH2_MOTOR_STATUS_INV_FAST_MOTOR_SPEED_NAME "INV_Fast_Motor_Speed"
#define ECU_DASH2_MOTOR_STATUS_INV_DC_BUS_CURRENT_NAME "INV_DC_Bus_Current"
#define ECU_DASH2_FAULT_STATUS_IMD_FAULT_NAME "IMD_Fault"
#define ECU_DASH2_FAULT_STATUS_BMSC_FAULT_NAME "BMSC_Fault"
#define ECU_DASH2_FAULT_STATUS_APPS_FAULT_NAME "APPS_Fault"
#define ECU_DASH2_FAULT_STATUS_BPPC_FAULT_NAME "BPPC_Fault"
#define ECU_DASH2_CAR_STATUS_RTD_NAME "RTD"
#define ECU_DASH2_CAR_STATUS_IR_PLUS_SIGNAL_NAME "IR_Plus_Signal"
#define ECU_DASH2_CAR_STATUS_LIMP_MODE_NAME "Limp_Mode"
#define ECU_DASH2_BMS_INFO_BATTERY_PERCENTAGE_NAME "Battery_Percentage"
#define ECU_DASH2_BMS_INFO_TOTAL_PACK_VOLTAGE_NAME "Total_Pack_Voltage"
#define ECU_DASH2_BMS_INFO_HIGHEST_TEMPERATURE_NAME "Highest_Temperature"
#define ECU_DASH2_COOLING_COOLING_ON_NAME "Cooling_On"
#define ECU_DASH2_COOLING_TOO_HOT_NAME "Too_Hot"

/**
 * Signals in message Motor_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_dash2_motor_status_t {
    /**
     * Range: -3277..3277 (-3276.8..3276.7 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_fast_dc_bus_voltage;

    /**
     * Range: 0..65535 (0..65535 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t inv_fast_motor_speed;

    /**
     * Range: -3277..3277 (-3276.8..3276.7 A)
     * Scale: 1
     * Offset: 0
     */
    int16_t inv_dc_bus_current;
};

/**
 * Signals in message Fault_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_dash2_fault_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t imd_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bmsc_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t apps_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bppc_fault;
};

/**
 * Signals in message Car_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_dash2_car_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rtd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ir_plus_signal;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t limp_mode;
};

/**
 * Signals in message BMS_Info.
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_dash2_bms_info_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_percentage;

    /**
     * Range: 0..10000 (0..1000 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t total_pack_voltage;

    /**
     * Range: 0..150 (0..150 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t highest_temperature;
};

/**
 * Signals in message Cooling.
 *
 * All signal values are as on the CAN bus.
 */
struct ecu_dash2_cooling_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cooling_on;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t too_hot;
};

/**
 * Pack message Motor_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_dash2_motor_status_pack(
    uint8_t *dst_p,
    const struct ecu_dash2_motor_status_t *src_p,
    size_t size);

/**
 * Unpack message Motor_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_dash2_motor_status_unpack(
    struct ecu_dash2_motor_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Motor_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_dash2_motor_status_init(struct ecu_dash2_motor_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_dash2_motor_status_inv_fast_dc_bus_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_motor_status_inv_fast_dc_bus_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_motor_status_inv_fast_dc_bus_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_dash2_motor_status_inv_fast_motor_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_motor_status_inv_fast_motor_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_motor_status_inv_fast_motor_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ecu_dash2_motor_status_inv_dc_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_motor_status_inv_dc_bus_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_motor_status_inv_dc_bus_current_is_in_range(int16_t value);

/**
 * Pack message Fault_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_dash2_fault_status_pack(
    uint8_t *dst_p,
    const struct ecu_dash2_fault_status_t *src_p,
    size_t size);

/**
 * Unpack message Fault_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_dash2_fault_status_unpack(
    struct ecu_dash2_fault_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Fault_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_dash2_fault_status_init(struct ecu_dash2_fault_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_dash2_fault_status_imd_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_fault_status_imd_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_fault_status_imd_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_dash2_fault_status_bmsc_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_fault_status_bmsc_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_fault_status_bmsc_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_dash2_fault_status_apps_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_fault_status_apps_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_fault_status_apps_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_dash2_fault_status_bppc_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_fault_status_bppc_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_fault_status_bppc_fault_is_in_range(uint8_t value);

/**
 * Pack message Car_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_dash2_car_status_pack(
    uint8_t *dst_p,
    const struct ecu_dash2_car_status_t *src_p,
    size_t size);

/**
 * Unpack message Car_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_dash2_car_status_unpack(
    struct ecu_dash2_car_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Car_Status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_dash2_car_status_init(struct ecu_dash2_car_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_dash2_car_status_rtd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_car_status_rtd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_car_status_rtd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_dash2_car_status_ir_plus_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_car_status_ir_plus_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_car_status_ir_plus_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_dash2_car_status_limp_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_car_status_limp_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_car_status_limp_mode_is_in_range(uint8_t value);

/**
 * Pack message BMS_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_dash2_bms_info_pack(
    uint8_t *dst_p,
    const struct ecu_dash2_bms_info_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_dash2_bms_info_unpack(
    struct ecu_dash2_bms_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BMS_Info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_dash2_bms_info_init(struct ecu_dash2_bms_info_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_dash2_bms_info_battery_percentage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_bms_info_battery_percentage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_bms_info_battery_percentage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ecu_dash2_bms_info_total_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_bms_info_total_pack_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_bms_info_total_pack_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_dash2_bms_info_highest_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_bms_info_highest_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_bms_info_highest_temperature_is_in_range(uint8_t value);

/**
 * Pack message Cooling.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ecu_dash2_cooling_pack(
    uint8_t *dst_p,
    const struct ecu_dash2_cooling_t *src_p,
    size_t size);

/**
 * Unpack message Cooling.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ecu_dash2_cooling_unpack(
    struct ecu_dash2_cooling_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Cooling.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ecu_dash2_cooling_init(struct ecu_dash2_cooling_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_dash2_cooling_cooling_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_cooling_cooling_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_cooling_cooling_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ecu_dash2_cooling_too_hot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ecu_dash2_cooling_too_hot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ecu_dash2_cooling_too_hot_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
